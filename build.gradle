buildscript {
    ext.kotlin_version = "1.5.31"
    ext.material_design_version = "1.4.0"
    ext.realm_version = '10.8.0'
    ext.dokka_version = '1.4.20'
    ext.nexus_publish_version = "1.0.0"

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.0.3"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.realm:realm-gradle-plugin:$realm_version"
        classpath("org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version")
        classpath "io.github.gradle-nexus:publish-plugin:$nexus_publish_version"
    }
}

plugins {
    id("maven-publish")
    id("signing")
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "realm-android"
apply plugin: "org.jetbrains.dokka"

repositories {
    mavenCentral()
    google()
    maven { url "https://jitpack.io" }
}

group = "ch.dreipol"

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    buildFeatures {
        dataBinding = true
    }

    kotlinOptions {
        freeCompilerArgs += '-Xexplicit-api=strict'
    }
}

task dokkaJavadocJar(type: Jar, dependsOn: dokkaHtml, group: 'publishing') {
    classifier('javadoc')
    from "$buildDir/javadoc"
}

dependencies {
    def nav_version = "2.3.5"

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "androidx.appcompat:appcompat:1.3.1"
    implementation "androidx.core:core-ktx:1.6.0"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

    implementation "androidx.test.espresso:espresso-core:3.4.0"
    implementation "com.google.android.material:material:$material_design_version"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.test:rules:1.4.0"

    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    //noinspection FragmentGradleConfiguration
    implementation "androidx.fragment:fragment-testing:1.3.6"

    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
}

if (project == project.rootProject) {
    apply plugin:  "io.github.gradle-nexus.publish-plugin"

    publishing {
        signing {
            def signingKey = System.getenv("PGP_KEY")
            def signingPassword = ""
            if (project.hasProperty('signing.password')) {
                signingPassword = project.getProperty('signing.password')
            }
            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications
        }

        nexusPublishing {
            repositories {
                sonatype {
                    nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
                    snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
                }
            }
        }
    }

    afterEvaluate {
        publishing {
            publications {
                release(MavenPublication) {
                    // The following applies a component to this publication
                    // which results in publishing an app bundle.
                    from components.release
                    artifactId = 'dreidroid'

                    pom.withXml {
                        def root = asNode()

                        root.children().last() + {
                            resolveStrategy = DELEGATE_FIRST

                            name 'dreidroid'
                            description 'Shared Repository for Android projects'
                            url 'https://github.com/dreipol/dreidroid'
                            scm {
                                url 'https://github.com/dreipol/dreidroid'
                                connection 'scm:https://github.com/dreipol/dreidroid.git'
                                developerConnection 'scm:git://github.com/dreipol/dreidroid.git'
                            }
                            licenses {
                                license {
                                    name 'The MIT License'
                                    url 'https://opensource.org/licenses/MIT'
                                    distribution 'repo'
                                }
                            }
                            developers {
                                developer {
                                    id 'melbic'
                                    name 'Samuel Bichsel'
                                    email 'samuel.bichsel@dreipol.ch'
                                }
                                developer {
                                    id 'kaiwidmer'
                                    name 'Kai Widmer'
                                    email 'kai.widmer@dreipol.ch'
                                }
                                developer {
                                    id 'tschuls'
                                    name 'Julia Strasser'
                                    email 'julia.strasser@dreipol.ch'
                                }
                            }
                        }
                    }

                    artifact dokkaJavadocJar
                }
            }
        }
    }
}

